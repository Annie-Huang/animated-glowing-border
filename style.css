*,
*::before,
*::after {
  box-sizing: border-box;
}

body {
  display: grid;
  place-content: center;
  gap: 2rem;
  min-height: 100vh;
  background-image: conic-gradient(
    at 125% 50%,
    #b78cf7,
    #ff7c94,
    #ffcf0d,
    #ff7c94,
    #b78cf7
  );
  font-family: system-ui;
}

.button {
  cursor: pointer;
  font-size: 2rem;
  font-family: inherit;
  font-weight: 700;
  color: hsl(320, 40%, 40%);
  background-color: hsl(349 100% 95%);
  padding: 0.75em 1.25em;
  border: 0;
  border-radius: 1.25rem;
}

.glow-effect {
  --glow-line-color: #fff;
  --glow-line-thickness: 2px;
  --glow-line-length: 20px;
  --glow-blur-color: #fff;
  --glow-blur-size: 10px;
  --glow-offset: 0px;
  --animation-speed: 1200ms;
  /* do not change, used for calculations */
  --container-offset: 100px;
  position: relative;
}

.glow-container {
  pointer-events: none; /* we only want the hover effect trigger in the button area, not the container area (since now we increase the container size) */
  position: absolute;
  inset: calc(var(--container-offset) / -2);
  width: calc(100% + var(--container-offset));
  height: calc(100% + var(--container-offset));
  opacity: 0;
  /*outline: 3px solid blue;*/
}

.glow-blur,
.glow-line {
  /* because the width in .glow-container increase, we need to shrink back into the button size */
  /* Cannot use scale (e.g. scale 1.1) for glow-offset because the length will glow bigger than the height */
  width: calc(100% - var(--container-offset) + var(--glow-offset));
  height: calc(100% - var(--container-offset) + var(--glow-offset));
  /* put into the correct position so now we can see the grow in the overflow outside the stroke as well */
  x: calc((var(--container-offset) / 2) + calc(var(--glow-offset) / -2));
  y: calc((var(--container-offset) / 2) + calc(var(--glow-offset) / -2));

  /* to the same as border-radius in .button */
  /* Control it through javascript instead */
  /*rx: 1.25rem;*/

  fill: transparent;
  /*stroke: black;*/
  /*stroke-width: 5px;*/
  /*stroke-dasharray: 50px 50px;*/
  stroke-dasharray: var(--glow-line-length) calc(50px - var(--glow-line-length));

  /*transition: stroke-dashoffset 2000ms; Don't do two ways transition*/
}

.glow-blur {
  /* Add the blur but you can only see the blur in the inner part, not the overflow part. */
  filter: blur(var(--glow-blur-size));
  stroke: var(--glow-blur-color);
  stroke-width: var(--glow-blur-size);
}

.glow-line {
  stroke: var(--glow-line-color);
  stroke-width: var(--glow-line-thickness);
}

/*.glow-effect:hover .glow-blur,*/
/*.glow-effect:hover .glow-line {*/
.glow-effect:is(:hover, :focus) :is(.glow-line, .glow-blur) {
  /* stroke-dashoffset is how far does it move, negative number will make it move clock wise */
  stroke-dashoffset: -80px;
  transition: stroke-dashoffset var(--animation-speed) ease-in;
}

/* Do it to .glow-container so the you don't need to target opacity in individual <rect> */
.glow-effect:is(:hover, :focus) .glow-container {
  animation: glow-visibility ease-in-out var(--animation-speed);
}

@keyframes glow-visibility {
  0%,
  100% {
    opacity: 0;
  }
  25%,
  75% {
    opacity: 1;
  }
}

/* Make the whole thing glow on hover. */
.glow-effect[data-glow-animation='false'] {
  --glow-line-length: 50px;
}

.glow-effect[data-glow-offset='true'] {
  --glow-offset: 10px;
}
